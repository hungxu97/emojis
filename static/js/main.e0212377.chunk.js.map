{"version":3,"sources":["components/emoji/Emoji.jsx","components/category-item/category-item.jsx","components/search/search.jsx","components/category/category.jsx","components/home/home.jsx","App.js","serviceWorker.js","index.js"],"names":["Emoji","character","unicodeName","className","role","CategoryItem","emojis","title","console","log","toUpperCase","length","map","codePoint","rest","key","Search","onchange","type","onChange","placeholder","Category","props","componentDidMount","fetch","then","response","json","data","cat1","filter","emoji","group","cat2","setState","handleInputChange","e","input","currentTarget","value","getFilteredEmojis","state","includes","render","React","Component","Home","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yWASeA,G,YAND,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,EAAcC,YAAd,OACZ,yBAAKC,UAAU,SACb,0BAAMC,KAAK,OAAOH,MCYPI,EAbM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAE9B,OADAC,QAAQC,IAAI,SAAWF,GAErB,yBAAKJ,UAAU,iBACb,4BAAKI,EAAMG,eACVJ,EAAOK,OAAS,GACfL,EAAOM,KAAI,gBAAGC,EAAH,EAAGA,UAAcC,EAAjB,oCACT,kBAAC,EAAD,eAAOC,IAAKF,GAAeC,SCEtBE,G,MAVA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,yBAAKd,UAAU,UACb,2BACEe,KAAK,OACLC,SAAUF,EACVG,YAAY,oDCkDHC,E,kDAnDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,kBAAoB,WAClBC,MACE,oFAECC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,KAAOD,EAAKE,QAAO,SAACC,GAAD,MAA2B,oBAAhBA,EAAMC,SACzC,EAAKC,KAAOL,EAAKE,QAAO,SAACC,GAAD,MAA2B,gBAAhBA,EAAMC,SACzC,EAAKE,SAAS,CAAE5B,OAAQsB,QApBX,EAwBnBO,kBAAoB,SAACC,GACnB,EAAKF,SAAS,CAAEG,MAAOD,EAAEE,cAAcC,SAzBtB,EA4BnBC,kBAAoB,kBAClB,EAAKC,MAAMnC,OAAOK,OAAS,EACvB,EAAK8B,MAAMnC,OAAOwB,QAAO,SAACC,GAAD,OACvBA,EAAM7B,YAAYwC,SAAS,EAAKD,MAAMJ,UAExC,IAjCa,EAmCnBM,OAAS,kBACP,yBAAKxC,UAAU,YACb,kBAAC,EAAD,CAAQc,SAAU,EAAKkB,oBACvB,yBAAKhC,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAcI,MAAM,SAASD,OAAQ,EAAKkC,uBAE5C,yBAAKrC,UAAU,SACb,kBAAC,EAAD,CAAcI,MAAM,kBAAkBD,OAAQ,EAAKuB,OACnD,kBAAC,EAAD,CAActB,MAAM,cAAcD,OAAQ,EAAK2B,WAzCrD,EAAKQ,MAAQ,CACXnC,OAAQ,GACR+B,MAAO,IAGT,EAAKR,KAAO,GACZ,EAAKI,KAAO,GATK,E,UADEW,IAAMC,WCKdC,EANF,kBACX,yBAAK3C,UAAU,QACb,kBAAC,EAAD,QCKW4C,MARf,WACE,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,QCKc6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASV,OAAO,kBAAC,EAAD,MAASW,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.e0212377.chunk.js","sourcesContent":["import React from 'react'\r\nimport './emoji.css'\r\n\r\nconst Emoji = ({ character, unicodeName }) => (\r\n  <div className='emoji'>\r\n    <span role='img'>{character}</span>\r\n  </div>\r\n)\r\n\r\nexport default Emoji\r\n","import React from 'react'\r\nimport './category-item.css'\r\nimport Emoji from '../emoji/Emoji'\r\n\r\nconst CategoryItem = ({ emojis, title }) => {\r\n  console.log('render' + title)\r\n  return (\r\n    <div className='category-item'>\r\n      <h1>{title.toUpperCase()}</h1>\r\n      {emojis.length > 0 &&\r\n        emojis.map(({ codePoint, ...rest }) => (\r\n          <Emoji key={codePoint} {...rest} />\r\n        ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CategoryItem\r\n","import React from 'react'\r\nimport './search.css'\r\n\r\nconst Search = ({ onchange }) => (\r\n  <div className='search'>\r\n    <input\r\n      type='text'\r\n      onChange={onchange}\r\n      placeholder='Anything that you remember about a emoji ...'\r\n    />\r\n  </div>\r\n)\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport './category.css'\r\nimport '../category-item/category-item'\r\nimport CategoryItem from '../category-item/category-item'\r\nimport Search from '../search/search'\r\n\r\nclass Category extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      emojis: [],\r\n      input: '',\r\n    }\r\n\r\n    this.cat1 = []\r\n    this.cat2 = []\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    fetch(\r\n      'https://emoji-api.com/emojis?access_key=8c621d1ab91385b6534d555df3e9f39362eb9082'\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.cat1 = data.filter((emoji) => emoji.group === 'smileys-emotion')\r\n        this.cat2 = data.filter((emoji) => emoji.group === 'people-body')\r\n        this.setState({ emojis: data })\r\n      })\r\n  }\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({ input: e.currentTarget.value })\r\n  }\r\n\r\n  getFilteredEmojis = () =>\r\n    this.state.emojis.length > 0\r\n      ? this.state.emojis.filter((emoji) =>\r\n          emoji.unicodeName.includes(this.state.input)\r\n        )\r\n      : []\r\n\r\n  render = () => (\r\n    <div className='category'>\r\n      <Search onchange={this.handleInputChange} />\r\n      <div className='items'>\r\n        <div className='left'>\r\n          <CategoryItem title='Emojis' emojis={this.getFilteredEmojis()} />\r\n        </div>\r\n        <div className='right'>\r\n          <CategoryItem title='smileys emotion' emojis={this.cat1} />\r\n          <CategoryItem title='people body' emojis={this.cat2} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Category\r\n","import React from 'react'\r\nimport './home.css'\r\nimport '../category/category'\r\nimport Category from '../category/category'\r\n\r\nconst Home = () => (\r\n  <div className='home'>\r\n    <Category />\r\n  </div>\r\n)\r\n\r\nexport default Home\r\n","import React from 'react'\nimport './App.css'\nimport Home from './components/home/home'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Home />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}